/**
 */
////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "get_strMap.h"

////////////////////////////////////////////////////////////////////////////////
// Private Structs
////////////////////////////////////////////////////////////////////////////////

typedef struct
{
	static char strD[2048];
	int strDSize = 2048;
	
	char *strL; // para tratar quando a getenv("REQUEST_METHOD") for maior que 2048
	strLSize;
	
	static map_t map = NULL;
} Get_StrMap_o;


typedef Get_StrMap_o* Get_StrMap_t;
////////////////////////////////////////////////////////////////////////////////
// Private Variables
////////////////////////////////////////////////////////////////////////////////

								
////////////////////////////////////////////////////////////////////////////////
// Private Functions Head
////////////////////////////////////////////////////////////////////////////////

										
////////////////////////////////////////////////////////////////////////////////
// Private Functions Inline
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Construct Functions
////////////////////////////////////////////////////////////////////////////////
Get_StrMap_t
_Get_StrMap_New()
{
	Get_StrMap_t getsm = MM_Malloc(sizeof(Get_StrMap_o);
	if(getsm == NULL) {
		Error("Allocated Space for Client Input Get - String Map");
	}
	
	getsm->strDSize = 2048;
	getsm->strL = NULL;
	getsm->strLSize = -1;
	
	getsm->map = Abstract_Factory_Common(Map);
	if(getsm->map == NULL) {
		Error("creating map");
	}
	
	return getsm;
}


ClientInput_Get_t
ClientInput_Get_StrMap_New_Interface()
{
	ClientInput_Get_t get = (ClientInput_Get_t)MM_Malloc(sizeof(ClientInput_Get_o));
	if(get == NULL) {
		Error("Allocated Space for Client Input Get Interface");
	}
	
	// insere o self
	co->self = NULL;
	
	// insere as funções da interface
	get->Get = ClientInput_Get_StrMap_Get;
	
	
	return get;
}


ClientInput_Get_t
ClientInput_Get_StrMap_Singleton_Interface()
{
	static ClientInput_Get_t get = NULL;
	
	if(get == NULL)
	{
		get = ClientInput_Get_StrMap_New_Interface();
		if(get == NULL)
		{
			Error("could not create singleton instance of Client Input Get.");
		}
	}
	
	return get;
}


////////////////////////////////////////////////////////////////////////////////
// Public Functions
////////////////////////////////////////////////////////////////////////////////
char*
ClientInput_Get_StrMap_Get(const char *get_key)
{
}






