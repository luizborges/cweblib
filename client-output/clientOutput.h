/**
 *
 * @descripion: como funciona o parser para encontrar a tag <?cweb CONTENT ?>
 * '<?cweb #include "name" ?>' -> inclui o objeto chamado name, que foi colocado na função ClientOuput_Se * t, onde name é o parâmetro 'name'.
 * A tag será então substituída pelo conteúdo do objeto name, pode ser um arquivo ou uma string.
 * Após a inserão, continuará a impressão do objeto de onde parou.
 * '<?cweb@' -> imprime normalemnte o valor '<?cweb' -> ou seja, o caracter '@' será omitido, porém isto  * somente ocorre com o primeiro caracter posterior. - deve-se utilizar tal valor nos comentários, pois o * parser não distingue se a linha está em um comentário ou não.
 * @ TODO - criar uma nova versão que verifica se a linha está dentro de um comentário ou não 
 *
 * NAME -> parameter in function ClientOuput_Set, have limits min and max.
 * NAME -> all character of name must be a letter (A to Z or a to z) or a digit (0 to 9) or special character ('_' and '-')
 */
#ifndef CLIENT_OUTPUT_H
#define CLIENT_OUTPUT_H

#ifdef __cplusplus
extern "C" {
#endif

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Defines
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Structs
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Enum
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// String types in arments
////////////////////////////////////////////////////////////////////////////////
// valores possíveis para o tipo type
//	"string"
//	"file"
//	"file_name"


// valores possíveis para o tipo opet
//	"root" // NÃO pode ser error - não é chamado pela tag <?cweb #include "NAME" ?>
//	"Leaf" // NÃO pode ser error - só é chamado pela tag <?cweb #include "NAME" ?>
//	"error_root" // só pode ser error - não é chamado pela tag <?cweb #include "NAME" ?>
//	"error_leaf" // só pode ser error - só é chamado pela tag <?cweb #include "NAME" ?>


////////////////////////////////////////////////////////////////////////////////
// Interface
////////////////////////////////////////////////////////////////////////////////

typedef struct {
	void *self; // guarda o objeto criado pela classe real

	// funções da interface
	// ver acima os valores permitidos para os parametros type e opt
	int (*Set) (void *self,
				const char *name, const void *output,
                const char *type, const char *opt);


	int (*Print) (void *self);
	
	int (*Print_Error) (void *self);
 	
} clientOutput_o;

////////////////////////////////////////////////////////////////////////////////
// Typedefs
////////////////////////////////////////////////////////////////////////////////

typedef clientOutput_o* clientOutput_t;

////////////////////////////////////////////////////////////////////////////////
// Constructs
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////



#ifdef __cplusplus
}
#endif
#endif // CLIENT_OUTPUT_H

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////





